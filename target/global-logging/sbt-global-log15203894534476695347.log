[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\franc\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\franc\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.5 (JetBrains s.r.o. Java 17.0.12)
[debug] Load.defaultLoad until apply took 125.1113ms
[debug]           Load.loadUnit: plugins took 140.1892ms
[debug]           Load.loadUnit: defsScala took 0.4682ms
[debug] [Loading] Scanning directory C:\Users\franc\OneDrive\Documentos\Franck\Faculdade\IFBA\PLP\data_analysis_spark\project
[debug]             Load.loadUnit: mkEval took 17.5703ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\franc\OneDrive\Documentos\Franck\Faculdade\IFBA\PLP\data_analysis_spark\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 35.8558 ms
[info] loading settings for project data_analysis_spark-build from idea.sbt ...
[debug]               Load.resolveProject(data_analysis_spark-build) took 38.0098ms
[debug]             Load.loadTransitive: finalizeProject(Project(id data_analysis_spark-build, base: C:\Users\franc\OneDrive\Documentos\Franck\Faculdade\IFBA\PLP\data_analysis_spark\project, plugins: List(<none>))) took 94.8123ms
[debug] [Loading] Done in C:\Users\franc\OneDrive\Documentos\Franck\Faculdade\IFBA\PLP\data_analysis_spark\project, returning: (data_analysis_spark-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3170.8476ms
[debug]           Load.loadUnit: cleanEvalClasses took 12.7306ms
[debug]         Load.loadUnit(file:/C:/Users/franc/OneDrive/Documentos/Franck/Faculdade/IFBA/PLP/data_analysis_spark/project/, ...) took 3333.9217ms
[debug]       Load.apply: load took 3529.2218ms
[debug]       Load.apply: resolveProjects took 4.9176ms
[debug]       Load.apply: finalTransforms took 76.4808ms
[debug]       Load.apply: config.delegates took 7.6437ms
[debug]       Load.apply: Def.make(settings)... took 508.5255ms
[debug]       Load.apply: structureIndex took 125.0114ms
[debug]       Load.apply: mkStreams took 3.1046ms
[info] loading project definition from C:\Users\franc\OneDrive\Documentos\Franck\Faculdade\IFBA\PLP\data_analysis_spark\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 6450.0097ms
[debug]     Load.loadUnit: defsScala took 0.0048ms
[debug] [Loading] Scanning directory C:\Users\franc\OneDrive\Documentos\Franck\Faculdade\IFBA\PLP\data_analysis_spark
[debug]       Load.loadUnit: mkEval took 0.4374ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.7932 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 22.4667ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\franc\OneDrive\Documentos\Franck\Faculdade\IFBA\PLP\data_analysis_spark, plugins: List(<none>))) took 25.6184ms
[debug] [Loading] Done in C:\Users\franc\OneDrive\Documentos\Franck\Faculdade\IFBA\PLP\data_analysis_spark, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1874.3028ms
[debug]     Load.loadUnit: cleanEvalClasses took 46.8958ms
[debug]   Load.loadUnit(file:/C:/Users/franc/OneDrive/Documentos/Franck/Faculdade/IFBA/PLP/data_analysis_spark/, ...) took 8374.3452ms
[debug] Load.apply: load took 8399.7927ms
[debug] Load.apply: resolveProjects took 0.1574ms
[debug] Load.apply: finalTransforms took 35.905ms
[debug] Load.apply: config.delegates took 0.3408ms
[debug] Load.apply: Def.make(settings)... took 150.8363ms
[debug] Load.apply: structureIndex took 45.9115ms
[debug] Load.apply: mkStreams took 0.0035ms
[info] set current project to data_analysis_spark (in build file:/C:/Users/franc/OneDrive/Documentos/Franck/Faculdade/IFBA/PLP/data_analysis_spark/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(idea-shell, None, None)
